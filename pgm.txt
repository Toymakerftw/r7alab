## Lexical

#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
bool isEnd(char ch)
{
if (ch == ' ' || ch == '+' || ch == '-' || ch == '*' ||
ch == '/' || ch == ',' || ch == ';' || ch == '>' ||
ch == '<' || ch == '=' || ch == '(' || ch == ')' ||
ch == '[' || ch == ']' || ch == '{' || ch == '}')
return (true);
return (false);
}
bool isOperator(char ch)
{
if (ch == '+' || ch == '-' || ch == '*' ||
ch == '/' || ch == '>' || ch == '<' ||
ch == '=')
return (true);
return (false);
}
bool isPunct(char ch)
{
if ( ch == ',' || ch == ';' ||ch == '(' || ch == ')' ||
ch == '[' || ch == ']' || ch == '{' || ch == '}')
return (true);
return (false);
}
bool Identifier(char* str)
{
if (str[0] == '0' || str[0] == '1' || str[0] == '2' ||
str[0] == '3' || str[0] == '4' || str[0] == '5' ||
str[0] == '6' || str[0] == '7' || str[0] == '8' ||
str[0] == '9' || isEnd(str[0]) == true)
return (false);
return (true);
}
bool isKeyword(char* str)
{
if (!strcmp(str, "if") || !strcmp(str, "else") ||
!strcmp(str, "while") || !strcmp(str, "do") ||
!strcmp(str, "break") ||
!strcmp(str, "continue") || !strcmp(str, "int")
|| !strcmp(str, "double") || !strcmp(str, "float")
|| !strcmp(str, "return") || !strcmp(str, "char")
|| !strcmp(str, "case") || !strcmp(str, "char")
|| !strcmp(str, "sizeof") || !strcmp(str, "long")
|| !strcmp(str, "short") || !strcmp(str, "typedef")
|| !strcmp(str, "switch") || !strcmp(str, "unsigned")
|| !strcmp(str, "void") || !strcmp(str, "static")
|| !strcmp(str, "struct") || !strcmp(str, "goto"))
return (true);
return (false);
}
bool isDigit(char* str)
{
int i, len = strlen(str);
if (len == 0)
return (false);
for (i = 0; i < len; i++) {
if (str[i] != '0' && str[i] != '1' && str[i] != '2'
&& str[i] != '3' && str[i] != '4' && str[i] != '5'
&& str[i] != '6' && str[i] != '7' && str[i] != '8'
&& str[i] != '9' || (str[i] == '-' && i > 0))
return (false);
}
return (true);
}
bool isFloat(char* str)
{
int i, len = strlen(str);
bool hasDecimal = false;
if (len == 0)
return (false);
for (i = 0; i < len; i++) {
if (str[i] != '0' && str[i] != '1' && str[i] != '2'
&& str[i] != '3' && str[i] != '4' && str[i] != '5'
&& str[i] != '6' && str[i] != '7' && str[i] != '8'
&& str[i] != '9' && str[i] != '.' ||
(str[i] == '-' && i > 0))
return (false);
if (str[i] == '.')
hasDecimal = true;
}
return (hasDecimal);
}
char* subString(char* str, int left, int right)
{
int i;
char* subStr = (char*)malloc(
sizeof(char) * (right - left + 2));
for (i = left; i <= right; i++)
subStr[i - left] = str[i];
subStr[right - left + 1] = '\0';
return (subStr);
}
// Parsing the input STRING.
void parse(char* str)
{
int left = 0, right = 0;
int len = strlen(str);
while (right <= len && left <= right) {
if (isEnd(str[right]) == false)
right++;
if (isEnd(str[right]) == true && left == right) {
if (isOperator(str[right]) == true)
printf("'%c' IS AN OPERATOR\n", str[right]);
if (isPunct(str[right]) == true)
printf("'%c' IS AN PUNCTUATION\n", str[right]);
right++;
left = right;
} else if (isEnd(str[right]) == true && left != right
|| (right == len && left != right)) {
char* subStr = subString(str, left, right - 1);
if (isKeyword(subStr) == true)
printf("'%s' IS A KEYWORD\n", subStr);
else if (isDigit(subStr) == true)
printf("'%s' IS AN Digit\n", subStr);
else if (isFloat(subStr) == true)
printf("'%s' IS A FLOAT\n", subStr);
else if (Identifier(subStr) == true
&& isEnd(str[right - 1]) == false)
printf("'%s' IS A IDENTIFIER\n", subStr);
else if (Identifier(subStr) == false
&& isEnd(str[right - 1]) == false)
printf("'%s' IS NOT A IDENTIFIER\n", subStr);
left = right;
}
}
return;
}
int main()
{
char str[100] = "int a = b + 1c; ";
parse(str);
return (0);
}

## RDParser
#include<stdio.h>
#include<ctype.h>
#include<string.h>
 
void Tprime();
void Eprime();
void E();
void check(); 
void T();
 void F();
 
char expression[10];
int count, flag;
 
int main()
{
      count = 0;
      flag = 0;
      printf("\nEnter an Algebraic Expression:\t");
      scanf("%s", expression);
      E();
      if((strlen(expression) == count) && (flag == 0))
      {
            printf("\nThe Expression %s is Valid\n", expression);
      }
      else 
      {
            printf("\nThe Expression %s is Invalid\n", expression);
      }
}
                    
void E()
{
      T();
      Eprime();
}
 
void T()
{
      check();
      Tprime();
}
 
void Tprime()
{
      if(expression[count] == '*')
      {
            count++;
            check();
            Tprime();
      }
}
 
void check()
{
      if(isalnum(expression[count]))
      {
            count++;
      }
      else if(expression[count] == '(')
      {
            count++;
            E();
            if(expression[count] == ')')
            {
                  count++;
            }
            else
            {
                  flag = 1; 
            }
      }         
      else
      {
            flag = 1;
      }
}
 
void Eprime()
{
      if(expression[count] == '+')
      {
            count++;
            T();
            Eprime();
      }
}

## Shift Reduce Parser

#include<stdio.h>
#include<stdlib.h>
#include<string.h>


int z = 0, i = 0, j = 0, c = 0;
char a[16], ac[20], stk[15], act[10];

void check()
{

	strcpy(ac,"REDUCE TO E -> ");
	

	for(z = 0; z < c; z++)
	{
		if(stk[z] == 'a')
		{
			printf("%sa", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			
	
			printf("\n$%s\t%s$\t", stk, a);
		}
	}
		
	for(z = 0; z < c - 2; z++)
	{
		
		if(stk[z] == 'E' && stk[z + 1] == '+' && stk[z + 2] == 'E')
		{
			printf("%sE+E", ac);
			stk[z] = 'E';
			stk[z + 1] = '\0';
			stk[z + 2] = '\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}
		
	}
		
	for(z=0; z<c-2; z++)
	{
		
		if(stk[z] == 'E' && stk[z + 1] == '*' && stk[z + 2] == 'E')
		{
			printf("%sE*E", ac);
			stk[z]='E';
			stk[z + 1]='\0';
			stk[z + 1]='\0';
			printf("\n$%s\t%s$\t", stk, a);
			i = i - 2;
		}
	}
	return ; 
}

int main()
{
	printf("GRAMMAR is -\nE->E+E\nE->E*E \nE->a\n");
	

	strcpy(a,"a+a");
	
	c=strlen(a);

	strcpy(act,"SHIFT");
	
	printf("\nstack \t input \t action");
	
	printf("\n$\t%s$\t", a);
	
	for(i = 0; j < c; i++, j++)
	{
		printf("%s", act);
		
		stk[i] = a[j];	
		stk[i + 1] = '\0';
		
		a[j]=' ';
		
		printf("\n$%s\t%s$\t", stk, a);
		
	
		check();
	}
	
	check();
	
	if(stk[0] == 'E' && stk[1] == '\0')
		printf("Accept\n");
	else 
		printf("Reject\n");

}

## FIRST

#include <stdio.h>
#include <ctype.h>

void FIRST(char);
int count, n = 0;
char p[10][10], first[10];

int main()
{
  int i, choice;
  char c, ch;
    printf("How many number of productions ? :");
    scanf(" %d",&count);
    for(i=0;i<count;i++)
    {
        printf("Enter productions Number %d : ",i+1);
        scanf(" %s",p[i]);
    }
    do
    {
        printf("\n Find the FIRST of  :");
        scanf(" %c",&c);
        FIRST(c); 

    printf("\n FIRST(%c)= { ", c);
    for (i = 0; i < n; i++)
      printf("%c ", first[i]);
    printf("}\n");

    printf("press 1 to continue : ");
    scanf("%d%c", &choice, &ch);
  } while (choice == 1);
}

void FIRST(char c)
{
  int j;
  if (!(isupper(c)))
    first[n++] = c;
  for (j = 0; j < count; j++)
  {
    if (p[j][0] == c)
    {
      if (p[j][2] == '$')
        first[n++] = '$';
      else if (islower(p[j][2]))
        first[n++] = p[j][2];
      else
        FIRST(p[j][2]);
    }
  }
}

##INTERMEDIATE PROGRAM
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
char infix[50],postfix[50];
int stack[50],top = -1;
int pop()
{
return(stack[top--]);
};
int precedence(char symbol)
{
switch(symbol)
{
case '(':
return 0;
case '+':
case '-':
return 1;
case '*':
case '/':
return 2;
case '^':
return 3;
default:
return 0;
}
}
void push(int symbol)
{
top=top+1;
stack[top]=symbol;
};
void topostfix()
{
int i,t=0,length;
char next;
char symbol;
length = strlen(infix);
for(i=length;i>=0;i--)
{
infix[i+1]=infix[i];
}
infix[0]='(';
infix[length+1]=')';
printf("The infix expressiom is : %s",infix);
for(i=0;i<=length+1;i++)
{
symbol=infix[i];
switch(symbol)
{
case '(':
push(symbol);
break;
case ')':
while((next=pop())!='(')
{
postfix[t]=next;
t++;
}
break;
case '+':
case '-':
case '*':
case '/':
case '^':
while(precedence(stack[top])>=precedence(symbol))
{
postfix[t++]=pop();
}
push(symbol);
break;
default:
postfix[t]=symbol;
t++;
}
}
};
int main()
{
printf("Enter the infix expression : ");
scanf("%s",infix);
topostfix();
printf("\n\nThe postfix expression is : %s ",postfix);
return 0;
}

## Constant Propagati
#include<stdio.h>
#include<string.h>
#include<ctype.h>
void input();
void output();
void change(int p,char *res);
void constant();
struct expr
{
char op[2],op1[5],op2[5],res[5];
int flag;
}arr[10];
int n;
void main()
{
input();
constant();
output();
}
void input()
{
int i;
printf("\n\nEnter the maximum number of expressions : ");
scanf("%d",&n);
printf("\nEnter the input : \n");
for(i=0;i<n;i++)
{
scanf("%s",arr[i].op);
scanf("%s",arr[i].op1);
scanf("%s",arr[i].op2);
scanf("%s",arr[i].res);
arr[i].flag=0;
}
}
void constant()
{
int i;
int op1,op2,res;
char op,res1[5];
for(i=0;i<n;i++)
{
if(isdigit(arr[i].op1[0]) && isdigit(arr[i].op2[0]) || strcmp(arr[i].op,"=")==0)
/*if both digits, store them in variables*/
{
op1=atoi(arr[i].op1);
op2=atoi(arr[i].op2);
op=arr[i].op[0];
switch(op)
{
case '+':
res=op1+op2;
break;
case '-':
res=op1-op2;
break;
case '*':
res=op1*op2;
break;
case '/':
res=op1/op2;
break;
case '=':
res=op1;
break;
}
sprintf(res1,"%d",res);
arr[i].flag=1;
change(i,res1);
}
}
}
void output()
{
int i=0;
printf("\nOptimized code is : ");
for(i=0;i<n;i++)
{
if(!arr[i].flag)
{
printf("\n%s %s %s %s",arr[i].op,arr[i].op1,arr[i].op2,arr[i].res);
}
}
}
void change(int p,char *res)
{
int i;
for(i=p+1;i<n;i++)
{
if(strcmp(arr[p].res,arr[i].op1)==0)
strcpy(arr[i].op1,res);
else if(strcmp(arr[p].res,arr[i].op2)==0)
strcpy(arr[i].op2,res);
}
}
